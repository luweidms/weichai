base:
  config:
    oauth:
      hostname: 124.71.179.190
      port: 9002
    nacos:
      hostname: 127.0.0.1
      port: 8848
    redis:
      hostname: 124.71.179.190
      port: 6379

spring:
  application:
    name: business-market
  main:
    allow-bean-definition-overriding: true
  cloud:
    nacos:
      discovery:
        server-addr: ${base.config.nacos.hostname}:${base.config.nacos.port}
        group: YOUCHE_GROUP
    #        ip: 192.168.20.107
#    inetutils:
#      preferred-networks: 192.168.20

  jackson:
    # 设置属性命名策略,对应jackson下PropertyNamingStrategy中的常量值，SNAKE_CASE-返回的json驼峰式转下划线，json body下划线传到后端自动转驼峰式
    #    property-naming-strategy: SNAKE_CASE
    # 全局设置@JsonFormat的格式pattern
    date-format: yyyy-MM-dd HH:mm:ss
    # 当地时区
    locale: zh
    # 设置全局时区
    time-zone: GMT+8
    # 常用，全局设置pojo或被@JsonInclude注解的属性的序列化方式
    default-property-inclusion: NON_NULL #不为空的属性才会序列化,具体属性可看JsonInclude.Include
    # 常规默认,枚举类SerializationFeature中的枚举属性为key，值为boolean设置jackson序列化特性,具体key请看SerializationFeature源码
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: true # 返回的java.util.date转换成timestamp
      FAIL_ON_EMPTY_BEANS: true # 对象为空时是否报错，默认true
    # 枚举类DeserializationFeature中的枚举属性为key，值为boolean设置jackson反序列化特性,具体key请看DeserializationFeature源码
    deserialization:
      # 常用,json中含pojo不存在属性时是否失败报错,默认true
      FAIL_ON_UNKNOWN_PROPERTIES: false
    # 枚举类MapperFeature中的枚举属性为key，值为boolean设置jackson ObjectMapper特性
    # ObjectMapper在jackson中负责json的读写、json与pojo的互转、json tree的互转,具体特性请看MapperFeature,常规默认即可
    mapper:
      # 使用getter取代setter探测属性，如类中含getName()但不包含name属性与setName()，传输的vo json格式模板中依旧含name属性
      USE_GETTERS_AS_SETTERS: false #默认false
    # 枚举类JsonParser.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonParser特性
    # JsonParser在jackson中负责json内容的读取,具体特性请看JsonParser.Feature，一般无需设置默认即可
    parser:
      ALLOW_SINGLE_QUOTES: true # 是否允许出现单引号,默认false
    # 枚举类JsonGenerator.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonGenerator特性，一般无需设置默认即可
    # JsonGenerator在jackson中负责编写json内容,具体特性请看JsonGenerator.Feature
  redis:
    # Redis数据库索引（默认为0)
    database: 0
    # Redis服务器连接密码（默认为空）
    password: youche123
    # 你 Redis 主机地址
    host: ${base.config.redis.hostname}
    # 你 Redis 主机端口
    port: ${base.config.redis.port}
    lettuce:
      pool:
        #连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 10000
        # 连接池中的最大空闲连接
        max-idle: 30
        # 连接池中的最小空闲连接
        min-idle: 10
      # 连接超时时间（毫秒）
    timeout: 10000
server:
  port: 9005

logging:
  level:
    com.youming.youche.market.business.controller: debug
  #将日志输出到文件
  config: classpath:dev-log.xml



dubbo:
  scan:
    base-packages: com.youming.youche.market.business.controller
  protocol:
    name: dubbo
    port: -1
   # host: 192.168.20.107
  #    serialization: kryo
  registry:
    address: nacos://${base.config.nacos.hostname}
    port: ${base.config.nacos.port}
    group: YOUCHE_GROUP
    register: true
    subscribe: true
  provider:
    loadbalance: roundrobin
    timeout: 5000
  metadata-report:
    address: nacos://${base.config.nacos.hostname}
    port: ${base.config.nacos.port}
  consumer:
    timeout: 50000
    retries: 0


security:
  oauth2:
    client:
      client-id: market
      client-secret: market
      access-token-uri: http://${base.config.oauth.hostname}:${base.config.oauth.port}/oauth/token
      user-authorization-uri: http://${base.config.oauth.hostname}:${base.config.oauth.port}/oauth/authorize
    resource:
      token-info-uri: http://${base.config.oauth.hostname}:${base.config.oauth.port}/oauth/check_token
